---
editor: 
  markdown: 
    wrap: 72
---

# Bitácora 4

```{r echo=FALSE}
options(scipen = 999)

```

```{r echo=FALSE, message=FALSE, warning=TRUE}
#| output: false
#| warning: false

library(readxl)
library(kableExtra)
library(readr)
library(dplyr)
library(janitor) # función clean_names()
library(magrittr) # función %<>%
library(stringr) # función str_replace
library(lubridate)
library(PerformanceAnalytics) # funciones skewness y kurtosis
library(ggplot2)
library(actuar)
library(fitdistrplus)
library(stats)
library(cowplot) # mejorar el aspecto de los gráficos
library(gamlss) #distribucion Johnson SU
library(glogis) #distribucion logistica generalizada

#Valores Extremos
library(extRemes)
library(evd)
```

```{r, warning=FALSE, message=FALSE}
#| echo: false
#| warning: false

datos <- read_excel("claims-2010-2013.xlsx") %>%

clean_names() # se limpian nombres columnas

datos <- datos %>% mutate(date_received = ymd(date_received),

close_amount = as.numeric(gsub("\\$", "", close_amount)))

# Se fija la base de datos

attach(datos)
```

```{r, message=FALSE, warning=FALSE}
#| echo: false

# X: Severidad

# N: Frecuencia

# Se filtran los reclamos aprobados o en los que se llegó a un acuerdo

datos_agregados <- datos %>% 
  filter(disposition == "Settle" | disposition== "Approve in Full")

datos_agregados <- datos_agregados %>% 
  group_by("ano" = year(date_received), "mes" = month(date_received) ) %>% 
  summarise(X = sum(close_amount), N = n()) %>%
  ungroup() %>% mutate(t = c(1:48), .before = X)

```

## Parte de planificación

### Variciones en el ajuste de la frecuencia

```{r Ajuste Poisson-Gaussiana inversa, echo=FALSE, results=FALSE}
fit_InvGauss <- fitdist(data = datos_agregados$N, distr = "poisinvgauss", method = "mle",  start = list(mean = 50, shape = 10))
gofstat(fit_InvGauss, discrete = TRUE)
cdfcomp(cex=0.8, fit_InvGauss)
```

```{r Ajuste Polya-Aeppli, echo=FALSE, results=FALSE}
library(polyaAeppli) # Composición Poisson-Geométrica
fit_PolyaAeppli <- fitdist(data = datos_agregados$N, distr = "PolyaAeppli", method = "mle",  start = list(lambda = 10, prob = 0.3), lower = c(0,0), upper = c(Inf,1))
cdfcomp(cex=0.8, fit_PolyaAeppli)
gofstat(fit_PolyaAeppli, discrete = TRUE)
```

```{r Ajuste Weibull discreta, echo=FALSE, results=FALSE}
library(extraDistr)
fit_WeibullDiscreta <- fitdist(data = datos_agregados$N, distr = "dweibull", method = "mle",  start = list(shape1 = 0.2, shape2 = 1), lower = c(0,0), upper = c(1,Inf))

cdfcomp(cex=0.8, fit_WeibullDiscreta)
gofstat(fit_WeibullDiscreta, discrete = TRUE)

```
```{r Ajuste Gamma discreta, echo=FALSE, results=FALSE}
library(extraDistr)

fit_GammaDiscreta <- fitdist(data = datos_agregados$N, distr = "dgamma", method = "mle",  start = list(shape=100, scale=32), lower = c(0,0), upper = c(Inf,Inf))

cdfcomp(fit_GammaDiscreta)

gofstat(fit_GammaDiscreta, discrete = TRUE)

```

```{r Delaporte 1, echo=FALSE, results=FALSE}
# library(Delaporte)
# library(fitdistrplus)
# fit_Delaporte <- fitdist(data = datos_agregados$N, distr = "delap", method = "mle",  start = list(alpha = 3, beta = 4, lambda = 10), lower = c(0,0,0), upper = c(Inf,Inf,Inf))
# 
# cdfcomp(fit_Delaporte)
# 
# gofstat(fit_Delaporte, discrete = TRUE)
```


```{r Mezcla de distribuciones Poisson 2}
datosN <-sort(datos_agregados$N)
wpar <- n2w(c(80,200,100),c(0.5,1.25,0.75)/3)
# wpar <- n2w(c(90,100,90,50),c(0.5,1.5,1.5,0.5)/4) # valor p 10%
# wpar <- n2w(c(90,100,90,55),c(0.5,1.5,1.5,0.5)/4) # valor p 17.51% con 4 P
# wpar <- n2w(c(80,90,100, 100,90,80),c(0.05,0.2,0.3,0.3,0.1,0.05))# valor p 0.88 con 6 P bic 565.5083

# wpar <- n2w(c(80,90,100,90,80),c(0.1,0.35,0.1,0.35,0.1))# valor p 0.175128  
 
# wpar <- n2w(c(90,100,90,55),c(0.5,1.2,1.5,0.8)/4) 
# wpar <- n2w(c(200,200,400,300,200),c(0.5,1,2,1,0.5)/5)


mllk <- function(wpar,x){ zzz <- w2n(wpar)
        -sum(log(outer(x,zzz$lambda,dpois)%*%zzz$delta)) }
n2w  <- function(lambda,delta)log(c(lambda,delta[-1]/(1-sum(delta[-1]))))
w2n  <- function(wpar){m <- (length(wpar)+1)/2
        lambda <- exp(wpar[1:m])
        delta  <- exp(c(0,wpar[(m+1):(2*m-1)]))
return(list(lambda=lambda,delta=delta/sum(delta))) }

datosN <-sort(datos_agregados$N)


resultados <- w2n(nlm(mllk,wpar,datosN)$estimate)


(lambda <- resultados$lambda)

(alpha <- resultados$delta)


n <- length(datos_agregados$N)
loglik <- sum(log(dmixpois(x = datos_agregados$N, lambda, alpha)) )
k <- length(lambda) + length(alpha)-1
bic <- -2*loglik+k*log(n) 
aic <- -2*loglik+k*2 

fake <- structure(list(estimate = list(lambda = lambda, alpha=alpha),
                       method="mle", sd=NA, cor=NA, vcov=NA,
                       loglik=0, aic=aic, bic=bic, n=48, data=datos_agregados$N, fix.arg = NULL, fix.arg.fun = NULL, dots=NULL, convergence=0, discrete=TRUE,weights=NULL ,distname="mixpois"), class = "fitdist")   

#class(fake)


```

```{r}
gofstat(fake)
cdfcomp(fake, fitcol = "blue")
```

```{r}
n <- length(datos_agregados$N)
loglik <- sum(log(dmixpois(x = datos_agregados$N, lambda, alpha)) )
k <- length(lambda) + length(alpha)-1
(bic <- -2*loglik+k*log(n) )

```

```{r Mezcla de distribuciones Poisson}
library(extraDistr)

dmixpois2 <- function(x, lambda1, lambda2, lambda3, lambda4, alpha1, alpha2, alpha3, alpha4){
  
  dmixpois(x, lambda=c(lambda1, lambda2, lambda3, lambda4), alpha = c(alpha1, alpha2, alpha3, alpha4))
  
}

pmixpois2 <- function(q, lambda1, lambda2, lambda3, lambda4, alpha1, alpha2, alpha3, alpha4){
  
  pmixpois(q, lambda=c(lambda1, lambda2, lambda3, lambda4), alpha = c(alpha1, alpha2, alpha3, alpha4))
  
}

a <- cut(sort(datos_agregados$N), breaks = 4)

pesos <- prop.table(table(a)) %>% as.numeric()
# dmixpois(12, lambda = c(25,30), alpha = c(1/3,2/3))

# fit_MezclaPoisson <- fitdist(data = datos_agregados$N, distr = "mixpois2", method = "mle", start = list(lambda1=80, lambda2=50, lambda3=100, lambda4=50), fix.arg = list(alpha1=0.05, alpha2=0.05, alpha3=0.7, alpha4=0.2))

fit_MezclaPoisson <- fitdist(data = datos_agregados$N, distr = "mixpois2", method = "mle", start = list(lambda1=10, lambda2= 47.47441, lambda3=69.25002, lambda4=283.31817), fix.arg = list(alpha1= 1.100846e-07 , alpha2=5.740846e-12, alpha3=8.333333e-02, alpha4=9.166666e-01))

# , lower=list(c(0,0)), upper=list(c(Inf, Inf))

cdfcomp(fit_MezclaPoisson)

denscomp(fit_MezclaPoisson)
gofstat(fit_MezclaPoisson, discrete = TRUE)

n <- sort(datos_agregados$N)
y <- dmixpois(n, lambda = fit_MezclaPoisson$estimate, alpha = c(0.05, 0.05, 0.7, 0.2))
plot(y~n, type="line")
ks.test(datos_agregados$N, y)


fit_MezclaPoisson$estimate
fit_MezclaPoisson$method
fit_MezclaPoisson$sd
fit_MezclaPoisson$cor
fit_MezclaPoisson$vcov
fit_MezclaPoisson$loglik
fit_MezclaPoisson$aic
fit_MezclaPoisson$bic
fit_MezclaPoisson$n
fit_MezclaPoisson$data
fit_MezclaPoisson$fix.arg

fit_MezclaPoisson$distname


fake <- structure(list(estimate = list(lambda = lambda, alpha=alpha),
                       method="mle", sd=NA, cor=NA, vcov=NA,
                       loglik=-382.8774, aic=0, bic=0, n=48, data=datos_agregados$N, fix.arg = NULL, fix.arg.fun = NULL, dots=NULL, convergence=0, discrete=TRUE,weights=NULL ,distname="mixpois" ,  class = "fitdist")                  )
                  
fit_GammaDiscreta$dots  
fit_MezclaPoisson$dots
fit_MezclaPoisson$convergence
fit_MezclaPoisson$discrete
fit_MezclaPoisson$weights
```

```{r Delaporte 2, echo=FALSE, results=FALSE}
library(gamlss.dist)
fit_Delaporte <- fitdist(data = datos_agregados$N, distr = "DEL", method = "mle",  start = list(mu = 265, sigma = 75, nu = 0.6), lower = c(0,0,0), upper = c(Inf,Inf,1))

cdfcomp(fit_Delaporte)
 
hgofstat(fit_Delaporte, discrete = TRUE)
```


```{r Weibull inversa discreta, echo=FALSE, results=FALSE}
# library(DiscreteInverseWeibull)

# fit_WeibullInvDiscreta <- fitdist(data = datos_agregados$N, distr = "diweibull", method = "mle", start = list(q=2.806039e-70, beta=9.828215e-01 ), lower = c(0,0), upper = c(1,Inf))

# mledist(data = datos_agregados$N, distr = "diweibull", start = list(q=0.9, beta=0.54), lower = c(0,0), upper = c(1,Inf))
# 
# cdfcomp(fit_WeibullInvDiscreta)
#  
# gofstat(fit_Delaporte, discrete = TRUE)
```


```{r Poisson-Tweedie, echo=FALSE, results=FALSE}
# library(poistweedie)
# 
# dpoistweedie(y = 1, p = exp(10), mu = 200, lambda = 10, theta0 = -10, log = F)
# 
# fit_PoissonTweedie <- 
#   fitdist(data = datos_agregados$N, distr = "poistweedie",
#           method = "mle", start = list(p = exp(10), mu = 200, lambda = 10, theta0 = -10), lower=c(1,0,0,-Inf), upper=c(Inf, Inf, Inf, 0), control = list(trace=1, maxit = 10000))
# 
# p <- fit_PoissonTweedie$estimate[1]
# mu <- fit_PoissonTweedie$estimate[2]
# lambda <- fit_PoissonTweedie$estimate[3]
# theta0 <- fit_PoissonTweedie$estimate[4]
# x <- sort(datos_agregados$N)
# y <- ppoistweedie(q = x, p = p, mu = mu, lambda = lambda, theta0 = theta0 , log = FALSE, lower.tail = TRUE)
# 
# 
# plot(y~x)
# lines(ecdf(x))
```


### Ajuste del máximo

```{r}
#| echo: false  
#| warning: false
datos_maximo <- datos %>% 
  filter(disposition == "Settle" | disposition== "Approve in Full")

datos_maximo <- datos_maximo %>% 
  group_by("ano" = year(date_received),"mes" = month(date_received) ) %>% 
  summarise(max = max(close_amount))

ext <- datos_maximo$max
```


```{r}
#| echo: false
GEV <- fevd(ext, type='GEV')
GEV_summary <- summary(GEV, silent=TRUE)
plot(GEV)
```

```{r}
#| echo: false
Gumbel <- fevd(ext, type='Gumbel')
Gumbel_summary <- summary(Gumbel, silent=TRUE)
plot(Gumbel)
```
```{r}
#| echo: false
#| warning: false
Weibull <- fitdist(ext, distr = 'weibull')
plot(Weibull)
```

AIC 

```{r}
#| echo: false
GEV_summary$AIC
Gumbel_summary$AIC
Weibull$aic
```
BIC

```{r}
#| echo: false
GEV_summary$BIC
Gumbel_summary$BIC
Weibull$bic
```


